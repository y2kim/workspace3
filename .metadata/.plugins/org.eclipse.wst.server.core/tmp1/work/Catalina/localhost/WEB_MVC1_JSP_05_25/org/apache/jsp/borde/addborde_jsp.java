/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.31
 * Generated at: 2018-06-01 08:13:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.borde;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import bean.FileInfos;
import bean.FileDao;
import bean.BorderInfos;
import bean.BoradDAO;

public final class addborde_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("bean.FileDao");
    _jspx_imports_classes.add("bean.BorderInfos");
    _jspx_imports_classes.add("bean.BoradDAO");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("bean.FileInfos");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t\t");
 
		request.setCharacterEncoding("utf-8"); 
		String ids = (String)session.getAttribute("loginId");
		String getip = request.getRemoteAddr();

		String realPath =	 request.getServletContext().getRealPath("/files/");
		int maxSize = 1024 * 1024 * 150;
		 String enc = "utf8";
		  MultipartRequest mr =
				  new MultipartRequest(request, realPath, maxSize , enc 
				  , new DefaultFileRenamePolicy());
		BoradDAO bdao = new BoradDAO();
		BorderInfos bifs = new BorderInfos();
		bifs.setTitle(mr.getParameter("title"));
		System.out.print(mr.getParameter("title"));
		bifs.setContents(mr.getParameter("contents"));
		bifs.setWriter(ids);
		System.out.print(mr.getParameter("contents"));
		bifs.setViewcount(0);
		bifs.setIp(getip);
		int val = bdao.callNextSeq();
		int result =  bdao.insertBorder(bifs,val);
		
		//int lastvalue = bdao.lastValue();
		
		String systemFileName = (mr.getFilesystemName("file"));
		String orifinalFileName =(mr.getOriginalFileName("file"));
		FileDao fdao = new FileDao();
		FileInfos fifs = new FileInfos();
		fifs.setArticle_no(val);
		fifs.setOrginal_file_name(orifinalFileName);
		fifs.setSystem_file_name(systemFileName);
		int result2 = -1;
		try{
		result2 = fdao.insertFileData(fifs);
		}catch(Exception E){
			result2 =-1;
		}
		
      out.write("\r\n");
      out.write("\t\t<script>\r\n");
      out.write("\t\t");
if(result>0 && result2>0) { 
      out.write("\r\n");
      out.write("\t\t alert(\"성공적으로 글과 파일이 업로드가 되었습니다\");\r\n");
      out.write("\t\t location.href=\"../BorderList.jsp\";\r\n");
      out.write("\t\t");
}else if(result>0 && result2<=0) {
      out.write("\r\n");
      out.write("\t\t alert(\"글 작성만이 완료되었습니다\");\r\n");
      out.write("\t\t location.href=\"../BorderList.jsp\";\r\n");
      out.write("\t\t");
}else{
      out.write("\r\n");
      out.write("\t\t alert(\"글 작성이 실패 하였습니다 잠시후에 다시 시도하십시오\");\r\n");
      out.write("\t\t location.href=\"../BorderList.jsp\";\r\n");
      out.write("\t\t");
}
      out.write("\r\n");
      out.write("\t\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
