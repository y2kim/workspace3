/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.31
 * Generated at: 2018-05-29 02:14:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import bean.MemberInfos;
import java.util.List;
import bean.DAO;

public final class modify_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("bean.MemberInfos");
    _jspx_imports_classes.add("bean.DAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <form action=\"tochange.jsp\" method=\"post\" id=\"modify\">\r\n");
      out.write("\t");

		String getids =(String)session.getAttribute("loginId");
		DAO date = new DAO();
	    List<MemberInfos> list = date.myinfo(getids);
	
      out.write("\r\n");
      out.write("  <table border=\"1\">\r\n");
      out.write("    <tr>\r\n");
      out.write("    <td>index</td>\r\n");
      out.write("    <td>원본</td>\r\n");
      out.write("    <td>변경할내용</td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>ID:</td>\r\n");
      out.write("      <td>");
      out.print(list.get(0).getId() );
      out.write("</td>\r\n");
      out.write("      <td>아이디는 변경불가</td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>PW:</td>\r\n");
      out.write("      <td>");
      out.print(list.get(0).getPw());
      out.write("</td>\r\n");
      out.write("      <td><input type=\"text\" id=\"cpw\" name=\"pw\"></td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>NAME:</td>\r\n");
      out.write("      <td>");
      out.print(list.get(0).getName());
      out.write("</td>\r\n");
      out.write("      <td><input type=\"text\" id=\"cname\" name=\"name\"></td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>PHONE:</td>\r\n");
      out.write("      <td>");
      out.print(list.get(0).getPhone1()+"-"+list.get(0).getPhone2()+"-"+list.get(0).getPhone3() );
      out.write("</td>\r\n");
      out.write("      <td><input type=\"text\" id=\"phone1\" name=\"phone1\">-<input type=\"text\" id=\"phone2\" name=\"phone2\">\r\n");
      out.write("      -<input type=\"text\" id=\"phone3\" name=\"phone3\"></td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>EMAIL:</td>\r\n");
      out.write("      <td>");
      out.print(list.get(0).getEmail());
      out.write("</td>\r\n");
      out.write("      <td><input type=\"text\" id=\"cemail\" name=\"email\"></td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td>ADDRESS:</td>\r\n");
      out.write("      <td>");
      out.print(list.get(0).getZipcode()+""+list.get(0).getAddress1()+list.get(0).getAddress2());
      out.write("</td>\r\n");
      out.write("      <td><input type=\"text\" id=\"sample6_postcode\" readonly name=\"zipcode\"> <button onclick=\"sample6_execDaumPostcode()\" type=\"button\">찾기</button>\r\n");
      out.write("      - <input type=\"text\" id=\"sample6_address\" readonly name=\"address1\"> -   <input type=\"text\"id=\"sample6_address2\" name=\"address2\">\r\n");
      out.write("    </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("  </table>\r\n");
      out.write("  <button id=\"change\" type=\"button\">변경하기</button>\r\n");
      out.write("  <button id=\"return\" type=\"button\">돌아가기</button>\r\n");
      out.write("</form>\r\n");
      out.write("    <script src=\"http://dmaps.daum.net/map_js_init/postcode.v2.js\"></script>\r\n");
      out.write("  <script>\r\n");
      out.write("    document.getElementById(\"return\").onclick = function(){\r\n");
      out.write("       location.href=\"login.jsp\";\r\n");
      out.write("    }\r\n");
      out.write("    document.getElementById(\"change\").onclick = function(){\r\n");
      out.write("       document.getElementById(\"modify\").submit();\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function sample6_execDaumPostcode() {\r\n");
      out.write("    new daum.Postcode({\r\n");
      out.write("       oncomplete: function(data) {\r\n");
      out.write("           // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\r\n");
      out.write("           // 각 주소의 노출 규칙에 따라 주소를 조합한다.\r\n");
      out.write("           // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("           var fullAddr = ''; // 최종 주소 변수\r\n");
      out.write("           var extraAddr = ''; // 조합형 주소 변수\r\n");
      out.write("\r\n");
      out.write("           // 사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\r\n");
      out.write("           if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\r\n");
      out.write("               fullAddr = data.roadAddress;\r\n");
      out.write("\r\n");
      out.write("           } else { // 사용자가 지번 주소를 선택했을 경우(J)\r\n");
      out.write("               fullAddr = data.jibunAddress;\r\n");
      out.write("           }\r\n");
      out.write("\r\n");
      out.write("           // 사용자가 선택한 주소가 도로명 타입일때 조합한다.\r\n");
      out.write("           if(data.userSelectedType === 'R'){\r\n");
      out.write("               //법정동명이 있을 경우 추가한다.\r\n");
      out.write("               if(data.bname !== ''){\r\n");
      out.write("                   extraAddr += data.bname;\r\n");
      out.write("               }\r\n");
      out.write("               // 건물명이 있을 경우 추가한다.\r\n");
      out.write("               if(data.buildingName !== ''){\r\n");
      out.write("                   extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("               }\r\n");
      out.write("               // 조합형주소의 유무에 따라 양쪽에 괄호를 추가하여 최종 주소를 만든다.\r\n");
      out.write("               fullAddr += (extraAddr !== '' ? ' ('+ extraAddr +')' : '');\r\n");
      out.write("           }\r\n");
      out.write("\r\n");
      out.write("           // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("           document.getElementById('sample6_postcode').value = data.zonecode; //5자리 새우편번호 사용\r\n");
      out.write("           document.getElementById('sample6_address').value = fullAddr;\r\n");
      out.write("           // 커서를 상세주소 필드로 이동한다.\r\n");
      out.write("           document.getElementById('sample6_address2').focus();\r\n");
      out.write("       }\r\n");
      out.write("    }).open();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("  </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
